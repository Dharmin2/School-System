/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.project2;

import java.awt.Color;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author navni
 */
public class StudentFrame extends javax.swing.JFrame {
private static Student student;
    /**
     * Creates new form StudentFrame
     */
    public StudentFrame(Student student) {
        initComponents();
        this.setTitle("Student");               
        welcomeL.setText(("Welcome: ") + student.getName());
        this.student = student;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        displayJL = new javax.swing.JLabel();
        registerJL = new javax.swing.JLabel();
        registerP = new javax.swing.JPanel();
        checkCourseInfoB = new javax.swing.JButton();
        registerB = new javax.swing.JButton();
        courseJL = new javax.swing.JLabel();
        enterCourseTF = new javax.swing.JTextField();
        displayScoreB = new javax.swing.JButton();
        welcomeL = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        displayTA = new javax.swing.JTextArea();
        messageL = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        displayJL.setText("Display");

        registerJL.setText("Register a Course");

        registerP.setBackground(new java.awt.Color(153, 255, 204));

        checkCourseInfoB.setText("Check Course Info");
        checkCourseInfoB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkCourseInfoBActionPerformed(evt);
            }
        });

        registerB.setText("Register");
        registerB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerBActionPerformed(evt);
            }
        });

        courseJL.setText("Course");

        enterCourseTF.setText("Enter Course");
        enterCourseTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterCourseTFActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout registerPLayout = new javax.swing.GroupLayout(registerP);
        registerP.setLayout(registerPLayout);
        registerPLayout.setHorizontalGroup(
            registerPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(registerPLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(registerPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(registerPLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(registerPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkCourseInfoB, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(registerB, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(registerPLayout.createSequentialGroup()
                        .addComponent(courseJL)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(enterCourseTF)))
                .addContainerGap())
        );
        registerPLayout.setVerticalGroup(
            registerPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, registerPLayout.createSequentialGroup()
                .addContainerGap(35, Short.MAX_VALUE)
                .addGroup(registerPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(courseJL)
                    .addComponent(enterCourseTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addComponent(checkCourseInfoB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(registerB)
                .addContainerGap())
        );

        displayScoreB.setText("Display Score");
        displayScoreB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayScoreBActionPerformed(evt);
            }
        });

        welcomeL.setText("Welcome ");

        displayTA.setEditable(false);
        displayTA.setColumns(20);
        displayTA.setRows(5);
        jScrollPane1.setViewportView(displayTA);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(messageL, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(68, 68, 68)
                        .addComponent(displayScoreB))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(registerJL)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(displayJL)
                                .addGap(92, 92, 92))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(registerP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(32, 32, 32)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(welcomeL)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(welcomeL)
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(registerJL, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(displayJL))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(registerP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(displayScoreB)
                    .addComponent(messageL))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

 /**
 * checks info for a course gets name,teacher,max student amount and remaining spots
 * @param evt click from user
 */
    private void checkCourseInfoBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkCourseInfoBActionPerformed
        displayTA.setText("");
        try {
            List<Course> courses = (List<Course>) Student.deserializeObject("course.ser");
            for (Course course : courses) {
                if (course.getName().equals(enterCourseTF.getText())) {
                    int remainingPositions = course.getMaxStuAmount() - course.getRegsStudents().size();
                    displayTA.setText("Name:"+ course.getName() + "\n" +
                            "Teacher:" + course.getTeacher().getName() + "\n" 
                            + "MaxStudentAmount:" + course.getMaxStuAmount() + "\n"
                    + "Remaining Positions:" + remainingPositions);
                }
                else
                    messageL.setText("Course doesn't exist");
                    messageL.setForeground(Color.red);
            }
            
        } catch (IOException ex) {
            Logger.getLogger(StudentFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(StudentFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    }//GEN-LAST:event_checkCourseInfoBActionPerformed

 /**
 * registers a student to a course
 * @param evt click from user
 */
    private void registerBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerBActionPerformed
        messageL.setText("");
        try {
        List<Course> courses = (List<Course>) User.deserializeObject("course.ser");
            for (Course course : courses) {
                if (student.getRegCourses().contains(course) && course.getName().equals(enterCourseTF.getText())) {
                    messageL.setText("Already registered");
                    messageL.setForeground(Color.red);
                } else if (course.getMaxStuAmount() <= course.getRegsStudents().size() 
                        && course.getName().equals(enterCourseTF.getText())) {
                    messageL.setText("Course is full");
                    messageL.setForeground(Color.red);
                } else if (course.getName().equals(enterCourseTF.getText())) {
                    List<Student> students = (List<Student>) User.deserializeObject("student.ser");
                    student.getRegCourses().add(course);
                    course.getRegsStudents().add(student);
                    User.serializeObject("student.ser", students);
                    User.serializeObject("course.ser", courses);
                    messageL.setText("Course registered");
                    messageL.setForeground(Color.green);
                }
                else
                    messageL.setText("Course doesn't exist");
                    messageL.setForeground(Color.red);
            }
    } catch (IOException ex) {
        Logger.getLogger(StudentFrame.class.getName()).log(Level.SEVERE, null, ex);
    } catch (ClassNotFoundException ex) {
        Logger.getLogger(StudentFrame.class.getName()).log(Level.SEVERE, null, ex);
    }
        
    }//GEN-LAST:event_registerBActionPerformed

    private void enterCourseTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterCourseTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_enterCourseTFActionPerformed

 /**
 * displays all of student's courses with name and grade
 * @param evt click from user
 */
    private void displayScoreBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayScoreBActionPerformed
        try {
            List<Course> courses = (List<Course>) User.deserializeObject("course.ser");
            for (int i = 0; i < courses.size(); i++) {
                if (courses.get(i).getRegsStudents().contains(student)) {
                    for (int j = 0; j < courses.get(i).getRegsStudents().size(); j++) {
                        if (courses.get(i).getRegsStudents().get(j).equals(student)) {
                            displayTA.setText(courses.get(i).getName()
                                    + ": " + courses.get(i).getFinalScores().get(j));
                        }
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("Exception occured");
        }
    }//GEN-LAST:event_displayScoreBActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton checkCourseInfoB;
    private javax.swing.JLabel courseJL;
    private javax.swing.JLabel displayJL;
    private javax.swing.JButton displayScoreB;
    private javax.swing.JTextArea displayTA;
    private javax.swing.JTextField enterCourseTF;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel messageL;
    private javax.swing.JButton registerB;
    private javax.swing.JLabel registerJL;
    private javax.swing.JPanel registerP;
    private javax.swing.JLabel welcomeL;
    // End of variables declaration//GEN-END:variables
}
